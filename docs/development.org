* Development
  In order to obtain a development environment, one can run:
#+BEGIN_src bash
$ nix develop
$ CONFIGURATION_PATH=$(realpath nixui/tests/sample/configuration.nix) python -m nixui.main
#+END_src bash
* Development Goals
** 0) Intuition
=nix-gui= is UX focused. All counterintuitive elements should be considered a bug. Bug reports can be filed at https://github.com/lapp0/nix-gui/issues There are no stupid questions. This program is intended to make nixos usable by someone with basic competence in Ubuntu, Mint, Windows, or OS X.

** 1) Comprehension
=nix-gui= strives to provide the ability to make any system changes that are possible with editing =configuration.nix=.

** 2) Simple Code
=nix-gui= is a relatively simple graphical program written in python with recursively defined elements to explore and define options.

** 3) Speed
Once built, =nix-gui= targets a 10ms load time for all form changes.
* Structure
** Architecture
TODO: expand on this general outline

Broadly, =nix-gui= can be considered to have 4 components
- Form Generator
- State Manager
- API
- Parser

*** Form Generator
The form generator dynamically generates widgets to both navigate the options "tree" and modify option values.

The options "tree" is descended one node at a time, querying the State Manager for the type spec and descendants of each node until fully resolving an option.

The State Manager is queried and a form to modify the option value is generated. When modified, the State Manager is notified.

*** State Manager
Upon initialization, the state manager queries the API and retrieves the type-spec and initial state of options in =CONFIGURATION_PATH=.

When a user performs an action, such as applying changes to a form or undoing an action it tracks state manages and reconds them to an in-memory model.

*** API
The API handles all system interactions related to retrieval and writing of option data. It abstracts away the complexities involved in discovering an options user-defined values, system defaults, types, etc.

Furthermore, API writes changes to =CONFIGURATION_PATH=.

It uses a variety of tools to get the job done:
- =nix_eval.py= utilizes =nix-instantiate --eval= and =unsafeGetAttrPos= (among other functions) to determine the location of an option within =CONFIGURATION_PATH=.
- =ast.py= uses =rnix-parser= convert a module to an AST.
- =parser.py= uses =nix_eval.py= to find the location of an option, and =ast.py= to retrieve expression given the location of an option.
- The schema is generated via =nix-build <nixpkgs/nixos/release.nix>=
- A variety of helper functions provide access to schema data for arbitrary options

Note: API's interface won't substantially change, but the way it retrieves data will become more correct and faster after https://github.com/lapp0/nix-gui/issues/9 is implement
*** Parser
- Generate ASTs
- Determine which variables are in scope, where they come from, and whether they can be used in an expression


** Files
(TODO: update)
- =load.sh=: Build =release.nix= and store as parsable json.
- =api.py=: Retrieve release option tree and query.
- =tree.py=: Data structure for storing and querying option tree.
- =gui.py=: Start =nix-gui= and load all components including the main functionality - the option tree explorer.
- =heirarchale_widgets.py=: Widgets to recursively navigate the option tree structure via list-views and tab-views.
- =option_widgets.py=: Render widgets for editing configuration based on the type of the option.
- =richtext.py=: Helper to render rich text in QT.
- =icons/=: Icons used in the GUI.

* Edit Handling
Case: A field is edited
- The field contents change, but nothing happens internally

Case: A field loses focus
- A signal is sent to the status bar to display the change
- A signal is sent to the parent to mark the change with an asterisk
- A signal is sent to the backend to record the history of changes

Case: The type of a field changes
- A signal

* Related
** Projects
- https://github.com/pmiddend/nixos-manager
- https://blog.matejc.com/blogs/myblog/graphical-ui-for-nix
- https://github.com/chriskiehl/Gooey
** Discussions
- https://old.reddit.com/r/NixOS/comments/o6807i/nixgui_work_in_progress_configure_your_system/
- https://github.com/NixOS/nixpkgs/issues/21662
- https://github.com/NixOS/nixpkgs/issues/15573
- https://discourse.nixos.org/t/is-anyone-working-on-a-gui-tool-to-manage-packages/5540/2
- https://discourse.nixos.org/t/user-friendly-nixos-distro/1348/3
- https://old.reddit.com/r/NixOS/comments/jag2k1/do_you_think_nixos_could_be_positioned_as_one_of/
- https://old.reddit.com/r/NixOS/comments/cu4dle/should_nix_have_a_gui/

* Inspiration
- [[https://www.tecmint.com/wp-content/uploads/2016/06/XFE-File-Manager.png][XFE File Manager - reasonable placement of "parent directories" ]]
- [[https://1.bp.blogspot.com/-swnGgdPeWOY/Wbf17eWgVeI/AAAAAAAAMDM/buRYvp78ZBggPFFZL4J_LKjMsF0qmQk1ACLcBGAs/s1600/Peek%2B2017-09-12%2B21-39.gif][Intuitive controls, good search functionality]]
- [[https://149366088.v2.pressablecdn.com/wp-content/uploads/2017/03/linux-mint-lightdm-settings.png][Good Widgets and layout]]
- [[https://i.stack.imgur.com/WQOmV.png][Good information display]]
- [[https://www.ics.com/sites/default/files/pictures/snapshot1.png][Pretty layout]]
- [[https://4.bp.blogspot.com/-GTgr9qvp5Pg/Wbf30hX74PI/AAAAAAAAMDY/3aT6O7E3C1IaSteDuTO4fSGSobjFrk6hQCLcBGAs/s1600/Peek%2B2017-09-12%2B22-03.gif][Pretty layout]]
- [[https://wiki.manjaro.org/images/5/58/Time_date_screen.png][Good time(/zone) settings screen]]
- [[https://geekflare.com/wp-content/uploads/2021/06/clover.jpg][Tabbed instances of the running program]]
* Credit
Thanks to the many #qt and #nixos users on [[https://libera.chat/][libera.chat]], and users of the NixOS Matrix server (#community:nixos.org) for answering a a myriad of questions about qt, nix, and nix-eval-lsp's behavior.

* Attribution
Icons are from https://publicdomainvectors.org/, wikimedia commons, https://svgrepo.com, and https://icon-icons.com/icon/Diff/132439
